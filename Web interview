简介

1.谈谈你对web标准的理解？

WEB标准不是某一个标准，而是一系列标准的集合。网页主要由三部分组成：结构（Structure）、表现（Presentation）和行为（Behavior）。对应的标准也分三方面：结构化标准语言主要包括XHTML和XML，表现标准语言主要包括CSS，行为标准主要包括对象模型（如W3C DOM）、ECMAScript等。这些标准大部分由万维网联盟（起草和发布，也有一些是其他标准组织制订的标准，比如ECMA（European Computer Manufacturers Association）的ECMAScript标准。

· 结构：html

· 表现：css

· 行为：js（dom + es）

WEB标准（结构、表现、行为分离）有哪些优点呢?

· 易于维护：只需更改CSS文件，就可以改变整站的样式

· 页面响应快：HTML文档体积变小，响应时间短

· 可访问性：语义化的HTML（结构和表现相分离的HTML）编写的网页文件，更容易被屏幕阅读器识别

· 设备兼容性：不同的样式表可以让网页在不同的设备上呈现不同的样式

· 搜索引擎：语义化的HTML能更容易被搜索引擎解析，提升排名

2.谈谈你对W3C标准的理解？

对应的标准也分三方面：结构化标准语言主要包括XHTML和XML，表现标准语言主要包括CSS，行为标准主要包括对象模型（如W3C DOM）、ECMAScript等。 这些标准大部分由W3C起草和发布，也有一些是其他标准组织制订的标准，比如ECMA（European Computer Manufacturers Association）的ECMAScript标准。

3.描述一下HTML5的概念？

HTML5 是对 HTML 标准的第五次修订，其主要的目标是将互联网语义化，以便更好地被人类和机器阅读，并同时提供更好地支持各种媒体的嵌入。

而HTML5本身并非技术，而是标准。它所使用的技术早已很成熟，国内通常所说的html5实际上是html与css3及JavaScript和api等的一个组合，大概可以用以下公式说明：HTML5≈HTML+CSS3+JavaScript+API.

4.请描述cookies、sessionStorage和localStorage的区别？

①.数据存储大小限制不同。

cookies：数据始终在同源的http请求中携带，即cookie能在服务器和浏览器间回传。故存储的数据大小最小，一般为4096B。

sessionStorage：数据保存在本地，不会自动发给服务器。所以一般5M或者更大。

localStorage：数据保存在本地，不会自动发给服务器。所以一般5M或者更大。

②.数据有效期不同

cookies：数据在cookie设置的有效期之前都有效，即使窗口和浏览器关闭。

sessionStorage：数据在关闭浏览器窗口后自动清除。存储的数据仅在同源窗口内有效，即使在不同浏览器相同页面也是无效的。一般用于存储会话数据。

localStorage：始终有效，因此用作持久数据。

③.数据作用域不同

cookies、localStorage：在所有同源窗口敏感词享。

sessionStorage：不在不同浏览器窗口敏感词享。

二、HTML

1. src和href的区别

src和href都是用来引用外部的资源，它们的区别如下：

- src：表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。
- href：表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。

2. 对HTML语义化的理解

语义化是指**根据内容的结构化（内容语义化），选择合适的标签（代码语义化）**。通俗来讲就是用正确的标签做正确的事情。



语义化的优点如下：

- 对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；
- 对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。



 常见的语义化标签：

    <header></header>  头部
    
    <nav></nav>  导航栏
    
    <section></section>  区块（有语义化的div）
    
    <main></main>  主要区域
    
    <article></article>  主要内容
    
    <aside></aside>  侧边栏
    
    <footer></footer>  底部

3. DOCTYPE(⽂档类型) 的作⽤

DOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义**来解析文档**，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。



浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是CSS1Compat）：

- CSS1Compat：标准模式（Strick mode），默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。
- BackCompat：怪异模式(混杂模式)(Quick mode)，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。

4. script标签中defer和async的区别

如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。



下图可以直观的看出三者之间的区别:



其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。



defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析，其区别如下：

- 执行顺序：多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；
- 脚本是否并行执行：async属性，表示后续文档的加载和执行与js脚本的加载和执行是并行进行的，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。



5. 常⽤的meta标签有哪些？

meta 标签由 name 和 content 属性定义，*用来描述网页文档的属性*，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些name作为大家使用的共识，开发者还可以自定义name。

 

（1）charset，用来描述HTML文档的编码类型：

<meta charset="UTF-8" >

（2） keywords，页面关键词：

<meta name="keywords" content="关键词" />

（3）description，页面描述：

<meta name="description" content="页面描述内容" />

（4）refresh，页面重定向和刷新：

<meta http-equiv="refresh" content="0;url=" />

（5）viewport，适配移动端，可以控制视口的大小和比例：

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

其中，content 参数有以下几种：

· width viewport ：宽度(数值/device-width)

· height viewport ：高度(数值/device-height)

· initial-scale ：初始缩放比例

· maximum-scale ：最大缩放比例

· minimum-scale ：最小缩放比例

· user-scalable ：是否允许用户缩放(yes/no）

6. HTML5有哪些更新？

1. 语义化标签

- header：定义文档的页眉（头部）；
- nav：定义导航链接的部分；
- footer：定义文档或节的页脚（底部）；
- article：定义文章内容；
- section：定义文档中的节（section、区段）；
- aside：定义其所处内容之外的内容（侧边）；

2. 媒体标签

（1） audio：音频

    <audio src='' controls autoplay loop='true'></audio>

属性：

- controls 控制面板
- autoplay 自动播放
- loop=‘true’ 循环播放



（2）video视频

    <video src='' poster='imgs/aa.jpg' controls></video>

属性：

- poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。
- controls 控制面板
- width
- height



（3）source标签

因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。

    <video>
        <source src='aa.flv' type='video/flv'></source>
        <source src='aa.mp4' type='video/mp4'></source>
    </video>

3. 表单

表单类型：

- email ：能够验证当前输入的邮箱地址是否合法
- url ： 验证URL
- number ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。
- search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。
- range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值
- color ： 提供了一个颜色拾取器
- time ： 时分秒
- data ： 日期选择年月日
- datatime ： 时间和日期(目前只有Safari支持)
- datatime-local ：日期时间控件
- week ：周控件
- month：月控件



表单属性：

- placeholder ：提示信息
- autofocus ：自动获取焦点
- autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提：
- - 表单必须提交过
  - 必须有name属性。
- required：要求输入框不能为空，必须有值才能够提交。
- pattern=" " 里面写入想要的正则模式，例如手机号patte="^(+86)?\d{10}$"
- multiple：可以选择多个文件或者多个邮箱
- form=" form表单的ID"



表单事件：

- oninput 每当input里的输入框内容发生变化都会触发此事件。
- oninvalid 当验证不通过时触发此事件。

4. 进度条、度量器

- progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少
- meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持）
- - high/low：规定被视作高/低的范围
  - max/min：规定最大/小值
  - value：规定当前度量值



设置规则：min < low < high < max

5.DOM查询操作

- document.querySelector()
- document.querySelectorAll()

它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)

6. Web存储

HTML5 提供了两种在客户端存储数据的新方法：

- localStorage - 没有时间限制的数据存储
- sessionStorage - 针对一个 session 的数据存储

7. 其他

- 拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：

    <img draggable="true" />

- 画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。

    <canvas id="myCanvas" width="200" height="100"></canvas>

- SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准
- 地理定位：Geolocation（地理定位）用于定位用户的位置。‘



总结：

（1）新增语义化标签：nav、header、footer、aside、section、article

（2）音频、视频标签：audio、video

（3）数据存储：localStorage、sessionStorage

（4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议）

（5）input标签新增属性：placeholder、autocomplete、autofocus、required

（6）history API：go、forward、back、pushstate



移除的元素有：

- 纯表现的元素：basefont，big，center，font, s，strike，tt，u;
- 对可用性产生负面影响的元素：frame，frameset，noframes；

（6）搜索引擎索引方式：

<meta name="robots" content="index,follow" />

其中，content 参数有以下几种：

· all：文件将被检索，且页面上的链接可以被查询；

· none：文件将不被检索，且页面上的链接不可以被查询；

· index：文件将被检索；

· follow：页面上的链接可以被查询；

· noindex：文件将不被检索；

nofollow：页面上的链接不可以被查询。

三、CSS基础

1. CSS选择器及其优先级

  选择器    	格式           	优先级权重
  id选择器  	#id          	100  
  类选择器   	#classname   	10   
  属性选择器  	a[ref=“eee”] 	10   
  伪类选择器  	li:last-child	10   
  标签选择器  	div          	1    
  伪元素选择器 	li:after     	1    
  相邻兄弟选择器	h1+p         	0    
  子选择器   	ul>li        	0    
  后代选择器  	li a         	0    
  通配符选择器 	*            	0    

对于选择器的优先级：

- 标签选择器、伪元素选择器：1
- 类选择器、伪类选择器、属性选择器：10
- id 选择器：100
- 内联样式：1000



注意事项：

- !important声明的样式的优先级最高；
- 如果优先级相同，则最后出现的样式生效；
- 继承得到的样式的优先级最低；
- 通用选择器（*）、子选择器（>）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；
- 样式表的来源不同时，优先级顺序为：内联样式 > 内部样式 > 外部样式 > 浏览器用户自定义样式 > 浏览器默认样式。

2. CSS中可继承与不可继承属性有哪些

一、无继承性的属性

1. display：规定元素应该生成的框的类型
2. 文本属性：

- vertical-align：垂直文本对齐
- text-decoration：规定添加到文本的装饰
- text-shadow：文本阴影效果
- white-space：空白符的处理
- unicode-bidi：设置文本的方向

1. 盒子模型的属性：width、height、margin、border、padding
2. 背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment
3. 定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index
4. 生成内容属性：content、counter-reset、counter-increment
5. 轮廓样式属性：outline-style、outline-width、outline-color、outline
6. 页面样式属性：size、page-break-before、page-break-after
7. 声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during



二、有继承性的属性

1. 字体系列属性

- font-family：字体系列
- font-weight：字体的粗细
- font-size：字体的大小
- font-style：字体的风格

1. 文本系列属性

- text-indent：文本缩进
- text-align：文本水平对齐
- line-height：行高
- word-spacing：单词之间的间距
- letter-spacing：中文或者字母之间的间距
- text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）
- color：文本颜色

1. 元素可见性

- visibility：控制元素显示隐藏

1. 列表布局属性

- list-style：列表风格，包括list-style-type、list-style-image等

1. 光标属性

- cursor：光标显示为何种形态

3. display的属性值及其作用

  属性值         	作用                           
  none        	元素不显示，并且会从文档流中移除。            
  block       	块类型。默认宽度为父元素宽度，可设置宽高，换行显示。   
  inline      	行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。
  inline-block	默认宽度为内容宽度，可以设置宽高，同行显示。       
  list-item   	像块类型元素一样显示，并添加样式列表标记。        
  table       	此元素会作为块级表格来显示。               
  inherit     	规定应该从父元素继承display属性的值。       

4. display的block、inline和inline-block的区别

　（1）block：会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；

　（2）inline：元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；

　（3）inline-block：将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。



对于行内元素和块级元素，其特点如下：

（1）行内元素

- 设置宽高无效；
- 可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；
- 不会自动换行；

（2）块级元素

- 可以设置宽高；
- 设置margin和padding都有效；
- 可以自动换行；
- 多个块状，默认排列从上到下。

5. 隐藏元素的方法有哪些

- display: none：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。
- visibility: hidden：元素在页面中仍占据空间，但是不会响应绑定的监听事件。
- opacity: 0：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。
- position: absolute：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。
- z-index: 负值：来使其他元素遮盖住该元素，以此来实现隐藏。
- clip/clip-path ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。
- transform: scale(0,0)：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。

6. link和@import的区别

两者都是外部引用CSS的方式，它们的区别如下：

- link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。
- link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。
- link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。
- link支持使用Javascript控制DOM去改变样式；而@import不支持。

对盒模型的理解

CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型





盒模型都是由四个部分组成的，分别是margin、border、padding和content。



标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：

- 标准盒模型的width和height属性的范围只包含了content，
- IE盒模型的width和height属性的范围包含了border、padding和content。



可以通过修改元素的box-sizing属性来改变元素的盒模型：

- box-sizeing: content-box表示标准盒模型（默认值）
- box-sizeing: border-box表示IE盒模型（怪异盒模型）
